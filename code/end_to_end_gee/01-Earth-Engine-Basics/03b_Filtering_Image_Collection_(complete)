var geometry = ee.Geometry.Point([77.60412933051538, 12.952912912328241])
var s2 = ee.ImageCollection("COPERNICUS/S2");
// The collection contains all imagery ever collected by the sensor. The entire collections
// are not very useful. Most applications require a subset of the images
// We use filters to select the appropriate images

// There are many types of filter functions, look at ee.Filter module
// Select a filter and then run the filter() function with the filter parameters

// Filter by metadata
// You can filter by PATH/ROW values, Orbit number, Cloud cover etc.
// We will use ee.Filter.lt()
var filtered = s2.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))

// Filter by date
// Give a start and end-date
var filtered = s2.filter(ee.Filter.date('2019-01-01', '2019-12-31'))

// Filter by location
// Specify a bounding box, location or geometry
// You can use the drawing tools to draw a geometry for filtering
var filtered = s2.filter(ee.Filter.bounds(geometry))

// Instead of applying filters one after the other, we can 'chain' them
// Use the . notation to apply all the filters together
var filtered = s2.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .filter(ee.Filter.date('2019-01-01', '2019-12-31'))
  .filter(ee.Filter.bounds(geometry))
print(filtered.size())

var rgbVis = {
  min: 0.0,
  max: 3000,
  bands: ['B4', 'B3', 'B2'],
};
Map.addLayer(filtered, rgbVis, 'Filtered') 