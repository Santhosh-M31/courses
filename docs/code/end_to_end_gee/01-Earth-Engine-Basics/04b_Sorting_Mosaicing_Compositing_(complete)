/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = /* color: #d63000 */ee.Geometry.Point([77.5732612484775, 12.974168627832677]),
    s2 = ee.ImageCollection("COPERNICUS/S2");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

var rgbVis = {
  min: 0.0,
  max: 3000,
  bands: ['B4', 'B3', 'B2'],
};
var filtered = s2.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .filter(ee.Filter.date('2019-01-01', '2019-12-31'))
  .filter(ee.Filter.bounds(geometry))
 
// The default order of the collection is by date
// So when you display the the collection, it implicitely creates a mosaic
// with the latest pixels in top
var mosaic = filtered.mosaic() 

// We can sort the collection differently before mosaicing
// Mosaic with the most cloud-free image on top
var leastCloudyMosaic = filtered.sort('CLOUDY_PIXEL_PERCENTAGE', false).mosaic();

// We can also create composite image by applying a selection criteria to each pixel
// from all pixels in the stack
// Composite with median pixel value
var medianComposite = filtered.median();

Map.addLayer(filtered, rgbVis, 'Filtered Collection');
Map.addLayer(mosaic, rgbVis, 'Filtered Collection');
Map.addLayer(leastCloudyMosaic, rgbVis, 'Least Cloudy Mosaic');
Map.addLayer(medianComposite, rgbVis, 'Median Composite')
